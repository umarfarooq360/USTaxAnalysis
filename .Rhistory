1:4
shiny::runApp()
shiny::runApp()
getwd()
setwd("C:/Users/OmarFarooq/Documents/workspace/USTaxAnalysis")
deployApp()
deployApp()
library(shinyapps)
deployApp()
#--------------PROBLEM 44---------------
# This is the solution to Problem 44 Chapter 1
# n is the number of replications of simulation to find probabilty
n=10000
simlist = rep(0,n); #A list to store siimulation outcomes
#Doing simulation n times
for(i in 1:n){
#Running a trial with 5 flips
trial = sample(1:4 , 5 , replace=TRUE)
#If there is a two in the trials, set the simlist outcome to one
if(sum(trial == 2)>0 ) {
simlist[i]=1;
}else{
simlist[i]=0;
}
}
print(paste("Solution to Problem 44: ",mean(simlist)));
n=100000
simlist = rep(0,n); #A list to store siimulation outcomes
# n is the number of replications of simulation to find probabilty
n=100000
simlist = rep(0,n); #A list to store siimulation outcomes
#Doing simulation n times
for(i in 1:n){
#Running a trial with 5 flips
trial = sample(1:4 , 5 , replace=TRUE)
#If there is a two in the trials, set the simlist outcome to one
if(sum(trial == 2)>0 ) {
simlist[i]=1;
}else{
simlist[i]=0;
}
}
print(paste("Solution to Problem 44: ",mean(simlist)));
#We would calculate one trial using the following statement.
#We are sampling from possible outcomes 1,4,8,16
#where each has the probability given in the parameter prob.
#We are only sampling once but this can be changed to how ever many times
#we wish to sample
#We draw 10000 samples from the distribution
k=10000
trial2 = sample(c(1,4,8,16) , k , replace=TRUE , prob=c(0.1,0.2,0.3,0.4) );
#Now we create a table to see if the probabilities match
table(trial2/k)
#where each has the probability given in the parameter prob.
#We are only sampling once but this can be changed to how ever many times
#we wish to sample
#We draw 10000 samples from the distribution
k=10000
trial2 = sample(c(1,4,8,16) , k , replace=TRUE , prob=c(0.1,0.2,0.3,0.4) );
#Now we create a table to see if the probabilities match
table(trial2)/k
#We would calculate one trial using the following statement.
#We are sampling from possible outcomes 1,4,8,16
#where each has the probability given in the parameter prob.
#We are only sampling once but this can be changed to how ever many times
#we wish to sample
#We draw 10000 samples from the distribution
k=10000
trial2 = sample(c(1,4,8,16) , k , replace=TRUE , prob=c(0.1,0.2,0.3,0.4) );
#Now we create a table to see if the probabilities match
table(trial2)/k
print("The probabilities match the desired probabilities. Solution is correct")
k = 2:50
res = matrix(0,length(k),3) #Create 49,3 matrix
res[,1] = k
for(i in 1:length(k)){
res[i,2] = prod(687:(687-k[i]+1))/(687^k[i]) # all different
res[i,3] = 1-res[i,2] # complement
}
res
res = sample(1:365,23,replace=T)
2 %in% table(res)
31
res
table(res)
n=10000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=2 %in% table(sample(1:365,23,replace=T) )
}
print(paste("Probability :", mean(simlist)));
n=1000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=2 %in% table(sample(1:365,23,replace=T) )
}
print(paste("Probability :", mean(simlist)));
n=5000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=2 %in% table(sample(1:365,23,replace=T) )
}
print(paste("Probability :", mean(simlist)));
n=5000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=2 %in% table(sample(1:365,50:55,replace=T) )
}
print(paste("Probability same birthday in room of 23 :", mean(simlist)));
n=1000
range = 50:55
simlist = matrix(0,n, length(range) )
for(i in range)
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,i,replace=T) )
}
}
n=1000
range = 50:55
simlist = matrix(0,n, length(range) )
for(i in range)
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,i,replace=T) )
}
}
range
range[2]
n=1000
range = 50:55
simlist = matrix(0,n, length(range) )
for(i in range)
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,i,replace=T) )
}
}
n=1000
range = 50:55
simlist = matrix(0,n, range )
for(i in 1:length(range))
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
print(paste("Probability same birthday in room of 23 :", mean(simlist)));
n=1000
range = 50:55
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults = mean(simlist [,i])/n;
}
simresults
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i])/n;
}
simresults
n=1000
range = 45:55
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
}
simresults
n=1000
range = 45:55
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.95){print("Greater than 95% probability occurs for ",range[i] ,"people in the room");
break;
}
}
n=1000
range = 45:55
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.95){print("Greater than 95% probability occurs for ",range[i] ,"people in the room");
break;
}
}
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.95){print(paste("Greater than 95% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
n=1000
range = 45:55
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.95){print(paste("Greater than 95% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
#----Part b----
#Note: This code takes a while to run
n=5000
range = 45:55
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.95){print(paste("Greater than 95% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
n=5000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=2 %in% table(sample(1:365,23,replace=T) )
}
print(paste("Probability same birthday in room of 23 :", mean(simlist)));
n=5000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=3 %in% table(sample(1:365,50,replace=T) )
}
print(paste("Probability same birthday in room of 23 :", mean(simlist)));
n=5000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=2 %in% table(sample(1:365,50,replace=T) )
}
print(paste("Probability 3 people have same birthday in room of 50 :", mean(simlist)));
#----Part c----
n=10000
simlist = rep(0,n)
for(i in 1:n){
simlist[i]=3 %in% table(sample(1:365,50,replace=T) )
}
print(paste("Probability 3 people have same birthday in room of 50 :", mean(simlist)));
n=1000
range = 100:120
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=3 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.5){print(paste("Greater than 50% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
n=1000
range = 80:110
simlist = matrix(0,n, range )
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
for(j in 1:n){
simlist[j,i]=3 %in% table(sample(1:365,range[i],replace=T) )
}
}
simresults = rep(length(range));
#Find the probability from the simulations
for(i in 1:length(range)){
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.5){print(paste("Greater than 50% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
n=5000
range = 45:55
simlist = matrix(0,n, range )
simresults = rep(length(range));
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
#Do the simulations
for(j in 1:n){
simlist[j,i]=2 %in% table(sample(1:365,range[i],replace=T) )
}
#Find the probability from them
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.95){print(paste("Greater than 95% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
n=5000
range = 80:110
simlist = matrix(0,n, range )
simresults = rep(length(range));
#Run simulations for each value of number of people in the room given by range
for(i in 1:length(range)){
#Do the simulations
for(j in 1:n){
simlist[j,i]=3 %in% table(sample(1:365,range[i],replace=T) )
}
#Find the probability
simresults[i] = mean(simlist [,i]);
if(simresults[i]>0.5){print(paste("Greater than 50% probability occurs for ",range[i] ,"people in the room") );
break;
}
}
simlist
simresults
k = 1:1000
res = matrix(0,length(k),3) #Create 49,3 matrix
res[,1] = k
for(i in 1:length(k)){
res[i,2] = prod(1000:(1000-k[i]))/(1000^k[i]) # all different
res[i,3] = 1-res[i,2] # complement
if(res[i,3]>0.5){print (paste("To get >50% probability,  buy ",k[i], tickets ))
break;}
}
res
prod(1000:1000)
k = 1:1000
res = matrix(0,length(k),3) #Create 49,3 matrix
res[,1] = k
for(i in 1:length(k)){
res[i,2] = prod(1000:(1000-k[i]))/(1000^(k[i]+1)) # all different
res[i,3] = 1-res[i,2] # complement
if(res[i,3]>0.5){print (paste("To get >50% probability,  buy ",k[i], tickets ))
break;}
}
k = 1:1000
res = matrix(0,length(k),3) #Create 49,3 matrix
res[,1] = k
for(i in 1:length(k)){
res[i,2] = prod(1000:(1000-k[i]))/(1000^(k[i]+1)) # all different
res[i,3] = 1-res[i,2] # complement
if(res[i,3]>0.5){print (paste("To get >50% probability,  buy ",k[i], " tickets" ))
break;}
}
res
shiny::runApp()
shiny::runApp()
shiny::runApp()
?save
shiny::runApp()
load("tmpData.Rdata")
load("tmpData.Rdata")
shiny::runApp()
load("tmpData.Rdata")
shiny::runApp()
shiny::runApp()
shiny::runApp()
clear
clear()
load("~/workspace/USTaxAnalysis/plot1.Rdata")
plot(map_d)
ggvisOutput("drought");
shiny::runApp()
map_d %>%
group_by(group, id  ) %>%
ggvis(~long, ~lat) %>%
layer_paths(fill:=~fill_col, strokeOpacity := 0.5, strokeWidth := 0.25) %>%
add_tooltip(drought_values, "hover") %>%
hide_legend("fill") %>%
hide_axis("x") %>% hide_axis("y") %>%
set_options(width=900, height=600, keep_aspect=TRUE) %>%
bind_shiny("drought")
shiny::runApp()
shiny::runApp()
View(map_d)
class(map_d)
shiny::runApp()
shiny::runApp()
install.packages(googleCharts)
install.packages("googleCharts")
version()
install.packages("googleCharts")
devtools::install_github("jcheng5/googleCharts")
shiny::runApp()
x= readRDS("C:/Users/OmarFarooq/Downloads/healthexp.Rds")
View(x)
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
View(timeData)
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
View(timeData)
shiny::runApp()
shiny::runApp()
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
View(timeData)
shiny::runApp()
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
shiny::runApp()
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
View(timeData)
shiny::runApp()
# different series happen to be ordered differently from year to year.
timeData = read.csv("data/timeTaxData.csv")
shiny::runApp()
shiny::runApp()
